buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
plugins {
	id "java"
	id "maven-publish"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

version = '0.0.1b' ?: "0.0.0.0"
group = 'git.trslim.fmjar'
archivesBaseName = 'fmjar-$mc_ver'

repositories {
	flatDir {dirs 'libs'}
	maven {
		name "JEI"
		url "https://dvs1.progwm16.com/files/maven"
	}
	maven {
		name "ModMaven"
		url "https://modmaven.k-4u.nl"
	}
	maven {
		name "Patchouli"
		url "https://maven.blamejared.com/"
	}
}


java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

sourceSets {
	main {
		resources {
			srcDir "src/main/generated"
			srcDir "src/main/resources"
		}
	}
}

minecraft {
    mappings channel: 'official', version: '1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
        }
        server {
            workingDirectory project.file('run/server')
        }
        gameTestServer {
        	workingDirectory project.file('run/server')
        	setForceExit(false)
        }
        data {
        	workingDirectory project.file("run")
        	args "--mod", "fmjar", "--all", "--output", file("src/main/generated/"), "--existing", file("src/main/resources")
        }
        configureEach {
        	workingDirectory project.file('run')
        	def dumpTransfromedClasses = false


        	ideaModule "${project.name}.main"
        	if (project.hasProperty('mc_uuid')) {
        		args '--uuid', project.getProperty('mc_uuid')
        	}
        	if (project.hasProperty('mc_username')) {
        		args '-username', project.getProperty('mc_username')
        	}
        	if (project.hasProperty('mc_accessToken')) {
        		args '--accessToken', project.getProperty('mc_accessToken')
        	}
    		property "forge.logging.markers", "REGISTRIES"
    		property "forge.logging.console.level", "debug"
    		property "fml.earlyprogresswindow", "false"

    		property "forge.enabledGameTestNamespaces", "fmjar"

    		property "mixin.env.remapRefMap", "true"
    		property "mixin.env.refMapRemappingFile", "$projectDir/build/createSrgToMcp/output.srg"

    		mods {
    			fmjar {
    				source sourceSets.main
    			}
    		}
        }
    }
}

/*mixin {
	add sourceSets.main, "mixins.${modId}.refmap.json"
	config "mixins.${modId}.json"

	debug.verbose = true
	debug.export = true
}*/

processResources {
	duplicatesStrategy = 'exclude'
	inputs.property 'version', project.version
	exclude ".cache"
	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
		expand "file": [jarVersion: project.version]
	}
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'
    testCompileOnly fileTree(include: ['OptiFine_*_MOD-deobf.jar'], dir: 'libs')
}
tasks.withType(Zip) {
	duplicatesStrategy = 'exclude'
}

jar {
	duplicatesStrategy = 'exclude'
	finalizedBy "reobfJar"
	from sourceSets.main.output.classesDirs
	from sourceSets.main.output.resourcesDir
	compileJava { options.encoding = 'UTF-8' }
	manifest {
		attributes([
                "Specification-Title"     : "FeaturedMasterJAR Mod",
                "Specification-Vendor"    : "trSlim",
                "Specification-Version"   : "${project.version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Vendor"   : "trSlim",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
	}
}
def publicApiIncludePatterns = {
	include "ftm/api/**"
}
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
	type 'jar'
	builtBy 'reobfJar'
}
/*
javadoc {
	source = sourceSets.main.allJava
	classpath = sourceSets.main.compileClasspath + sourceSets.main.output

	options.addStringOption("Xdoclint:none", "-quiet")
	options.encoding = "UTF-8"
}
task javadocJar(type: Jar, dependsOn: javadoc, group: "build") {
	archiveClassifier.set("javadoc")
	from javadoc.destinationDir
}
task sourcesJar(type: Jar) {
	archiveClassifier.set("sources")
	from sourceSets.main.allJava
}
task apiJar(type: Jar, group: "build") {
	archiveClassifier.set("api")
	from sourceSets.main.output
	from sourceSets.main.allJava
}

apiJar publicApiIncludePatterns

artifacts {
	archives javadocJar
	archives sourcesJar
	archives apiJar
}*/

publishing {
	/*
	afterEvaluate {
		publications {
			mavenJava(MavenPublication) {
				groupId = project.group
				artifactId = project.archivesBaseName
				version = project.version

				pom.withXml {
					asNode().remove(asNode().dependencies)
				}

				from components.java
				artifact sourcesJar
				artifact javadocJar
				artifact apiJar
			}
		}
	}

	repositories {
		maven {
			def releasesRepoUrl = uri("$buildDir/repos/releases")
			def snapshotsRepoUrl = uri("$buildDir/repos/snapshots")

			name = "Project"
			url = version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl
		}

		maven {
			credentials {
				username System.getenv("MODMAVEN_USER")
				password System.getenv("MODMAVEN_PASSWORD")
			}

			name = "Modmaven"
			url = "https://modmaven.dev/artifactory/local-releases/"
		}
	}*/
	publications {
		mavenJava(MavenPublication) {
			artifact reobfArtifact
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}/*
if (System.getenv("CURSEFORGE")) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE")

		project {
			id = project.curseforge_project
			changelogType = "markdown"
			changelog = "View changelog at [rel page](https://github.com/0micro/featured-master/releases/tag/${version})"

			if (version.contains("alpha")) {
				releaseType = "alpha"
			} else if (version.contains("beta")) {
				releaseType = "beta"
			} else {
				releaseType = "release"
			}

			addGameVersion project.minecraft_version
			addGameVersion "Forge"

			mainArtifact(jar.archiveFile) {
				displayName = "${project.version}"
				
			}
		}
	}
}
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

task publishModrinth(type: TaskModrinthUpload) {
	onlyIf {
		System.getenv("MODRINTH")
	}

	dependsOn jar

	token = System.getenv("MODRINTH")
	changelog = "View changelog at [the release page](https://github.com/0micro/featured-master/releases/tag/${version})"
	projectId = project.modrinth_project
	versionName = project.version
	versionNumber = project.version

	if (version.contains("alpha")) {
		versionType = VersionType.ALPHA
	} else if (version.contains("beta")) {
		versionType = VersionType.BETA
	} else {
		versionType = VersionType.RELEASE
	}

	uploadFile = jar
	addGameVersion(project.minecraft_version)
	addLoader("forge")
}*/
apply from: 'mcreator.gradle'

